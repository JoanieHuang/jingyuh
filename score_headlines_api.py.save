from fastapi import FastPI, HTTPException
from pydantic import BaseModel
from typing import List
import logging
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
import logging
import joblib
from sentence_transformers import SentenceTransformer
import uvicorn
import traceback

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize app
app = FastAPI(title="Headline Sentiment Analysis API", version="1.0.0")

# Load models only once
try:
    logger.info("Loading model and embedder...")
    svm_model = joblib.load("svm.joblib")
    embedder = SentenceTransformer("all-MiniLM-L6-v2")
    logger.info("Models loaded successfully.")
except Exception as e:
    logger.critical(f"Failed to load models: {str(e)}")
    logger.critical(f"Traceback: {traceback.format_exc()}")
    raise e

# Define request/response models
class HeadlineRequest(BaseModel):
    headlines: List[str]

class HeadlineResponse(BaseModel):
    labels: List[str]

class StatusResponse(BaseModel):
    status: str

def encode_and_predict(headlines: List[str]) -> List[str]:
    """Encode headlines and predict sentiment"""
    try:
        if not headlines:
            logger.warning("Empty headlines list provided")
            return []
        
        logger.info(f"Processing {len(headlines)} headlines")
        
        # Encode headlines using sentence transformer
        embeddings = embedder.encode(headlines)
        
        # Predict using SVM model
        predictions = svm_model.predict(embeddings)
        
        # Convert predictions to labels (assuming your model returns 0, 1, 2)
        # You may need to adjust this mapping based on your actual model's output
        label_mapping = {0: 'Pessimistic', 1: 'Neutral', 2: 'Optimistic'}
        labels = [label_mapping.get(pred, 'Unknown') for pred in predictions]
        
        logger.info(f"Successfully processed {len(headlines)} headlines")
        return labels
        
    except Exception as e:
        logger.error(f"Error in encode_and_predict: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise e

@app.get("/status", response_model=StatusResponse)
async def get_status():
    """Health check endpoint"""
    try:
        logger.info("Statu

@app.get("/status")
def get_status():
    return {"status": "OK"}

@app.post("/score_headlines")
def score_headlines(request: HeadlineRequest):
    headlines = request.headlines
    if not headlines:
        logger.warning("Empty headline list received.")
        raise HTTPException(status_code=400, detail="No headlines provided.")

    logger.info(f"Scoring {len(headlines)} headlines...")
    try:
        embeddings = embedder.encode(headlines)
        preds = svm_model.predict(embeddings)
        return {"labels": preds.tolist()}
    except Exception as e:
        logger.error(f"Prediction failed: {e}")
        raise HTTPException(status_code=500, detail="Prediction error.")
